<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net6.0-windows10.0.19041.0</TargetFramework>
    <TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
    <RootNamespace>MSTestWinAppSDK11BugRepro</RootNamespace>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <Platforms>x86;x64;arm64</Platforms>
    <RuntimeIdentifiers>win10-x86;win10-x64;win10-arm64</RuntimeIdentifiers>
    <PublishProfile>win10-$(Platform).pubxml</PublishProfile>
    <UseWinUI>true</UseWinUI>
    <Configurations>Debug;Release;Test10;Test11</Configurations>
	  
	<!-- 
	  For Test10 (x86 and x64), only the following property is required.
	  If property is not present, the tests won't run. 
	  I couldn't test arm64:
	  DEP3308: Deployment target 'Local Machine' does not support projects targetting ARM64 platform. Supported platforms: X86,X64.
	-->
	<!--<EnablePreviewMsixTooling>true</EnablePreviewMsixTooling>-->
	  
    <!--
      For Test11 (x86 and x64), a combination of WindowsAppContainer and
	  EnableMsixTooling OR EnablePreviewMsixTooling is required.
	  I couldn't test arm64:
	  DEP3308: Deployment target 'Local Machine' does not support projects targetting ARM64 platform. Supported platforms: X86,X64.
	-->
      
  </PropertyGroup>
    
  <PropertyGroup Condition="'$(Configuration)'=='Test10'">
	<EnablePreviewMsixTooling>true</EnablePreviewMsixTooling>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Test11'">
	<EnableMsixTooling>true</EnableMsixTooling>
    <!--This can be added as a workaround, but regresses another fix added to Windows App SDK 1.1-->
    <!--<WindowsAppContainer>true</WindowsAppContainer>-->
  </PropertyGroup>

  <ItemGroup>
    <Content Include="Assets\SplashScreen.scale-200.png" />
    <Content Include="Assets\LockScreenLogo.scale-200.png" />
    <Content Include="Assets\Square150x150Logo.scale-200.png" />
    <Content Include="Assets\Square44x44Logo.scale-200.png" />
    <Content Include="Assets\Square44x44Logo.targetsize-24_altform-unplated.png" />
    <Content Include="Assets\StoreLogo.png" />
    <Content Include="Assets\Wide310x150Logo.scale-200.png" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.TestPlatform.TestHost" Version="17.3.0">
      <ExcludeAssets>build</ExcludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Windows.SDK.BuildTools" Version="10.0.22621.1" />
    <PackageReference Include="MSTest.TestAdapter" Version="2.2.10" />
    <PackageReference Include="MSTest.TestFramework" Version="2.2.10" />
    <Manifest Include="$(ApplicationManifest)" />
  </ItemGroup>
  <ItemGroup>
    <ProjectCapability Include="TestContainer" />
  </ItemGroup>

  <ItemGroup Condition="'$(Configuration)'=='Test10'">
    <PackageReference Include="Microsoft.WindowsAppSDK" Version="1.0.4" />
  </ItemGroup>

  <ItemGroup Condition="'$(Configuration)'!='Test10'">
    <PackageReference Include="Microsoft.WindowsAppSDK" Version="1.1.4" />
  </ItemGroup>

  <!-- 
    Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
    Tools extension to be activated for this project even if the Windows App SDK Nuget
    package has not yet been restored.
  -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <ProjectCapability Include="Msix" />
  </ItemGroup>

  <PropertyGroup>
    <DefineConstants>TESTRUNNER;DEBUG</DefineConstants>
  </PropertyGroup>

  <!-- 
    Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution 
    Explorer "Package and Publish" context menu entry to be enabled for this project even if 
    the Windows App SDK Nuget package has not yet been restored.
  -->
  <PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
  </PropertyGroup>
</Project>